# Multi-stage build pour optimiser la taille de l'image
FROM node:18-alpine AS builder

# Métadonnées de l'image
LABEL maintainer="votre-email@example.com"
LABEL description="Backend API pour TodoList dockerisée"

WORKDIR /app

# Copie des fichiers de dépendances pour optimiser le cache Docker
COPY backend/package*.json ./
RUN npm install && npm cache clean --force

# Stage de production
FROM node:18-alpine AS production

# Installation des dépendances système et création d'un utilisateur non-root
RUN apk add --no-cache dumb-init \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001

WORKDIR /app

# Copie des dépendances depuis le stage builder
COPY --from=builder /app/node_modules ./node_modules
COPY --chown=nodejs:nodejs backend/ ./
COPY --chown=nodejs:nodejs frontend/ ./frontend/

# Changement vers l'utilisateur non-root pour la sécurité
USER nodejs

# Health check pour surveiller l'état du service
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Exposition du port
EXPOSE 3000

# Utilisation de dumb-init pour une gestion propre des signaux
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"] 